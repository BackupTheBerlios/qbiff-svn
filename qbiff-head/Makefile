#############################################################################
# Makefile for building: qbiff
# Generated by qmake (1.07a) (Qt 3.3.3) on: Tue Nov 16 18:45:52 2004
# Project:  qbiff.pro
# Template: app app
# Command: $(QMAKE) -o Makefile qbiff.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -Wall -W -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -D_REENTRANT  -DQT_NO_DEBUG -DQT_THREAD_SUPPORT -DQT_SHARED -DQT_TABLET_SUPPORT
CXXFLAGS = -pipe -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -Wall -W -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -D_REENTRANT  -DQT_NO_DEBUG -DQT_THREAD_SUPPORT -DQT_SHARED -DQT_TABLET_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/lib/qt3/mkspecs/default -I. -I/usr/include -I$(QTDIR)/include
LINK     = g++
LFLAGS   = 
LIBS     = $(SUBLIBS) -L/usr/lib/ -L$(QTDIR)/lib/ -L/usr/X11R6/lib/ -lssl -lcrypto -lXtst -lqt-mt -lXext -lX11 -lm -lpthread
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = ./

####### Files

HEADERS = sslcommon.h \
		sslserver.h \
		sslinit.h \
		sslconnection.h \
		sslclient.h \
		serverhandler.h \
		clientfolder.h \
		clientinfo.h \
		button.h \
		parser.h \
		notify.h
SOURCES = qbiff.cpp \
		sslcommon.cpp \
		sslserver.cpp \
		sslinit.cpp \
		sslconnection.cpp \
		sslclient.cpp \
		serverhandler.cpp \
		clientfolder.cpp \
		clientinfo.cpp \
		button.cpp \
		parser.cpp \
		notify.cpp
OBJECTS = qbiff.o \
		sslcommon.o \
		sslserver.o \
		sslinit.o \
		sslconnection.o \
		sslclient.o \
		serverhandler.o \
		clientfolder.o \
		clientinfo.o \
		button.o \
		parser.o \
		notify.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = moc_sslserver.cpp \
		moc_sslinit.cpp \
		moc_sslconnection.cpp \
		moc_sslclient.cpp \
		moc_serverhandler.cpp \
		moc_clientfolder.cpp \
		moc_clientinfo.cpp \
		moc_button.cpp \
		moc_notify.cpp
OBJMOC = moc_sslserver.o \
		moc_sslinit.o \
		moc_sslconnection.o \
		moc_sslclient.o \
		moc_serverhandler.o \
		moc_clientfolder.o \
		moc_clientinfo.o \
		moc_button.o \
		moc_notify.o
DIST	   = qbiff.pro
QMAKE_TARGET = qbiff
DESTDIR  = 
TARGET   = qbiff

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(OBJCOMP) $(LIBS)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: qbiff.pro  /usr/lib/qt3/mkspecs/default/qmake.conf /usr/lib/qt3/lib/libqt-mt.prl
	$(QMAKE) -o Makefile qbiff.pro
qmake: 
	@$(QMAKE) -o Makefile qbiff.pro

dist: 
	@mkdir -p .tmp/qbiff && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .tmp/qbiff/ && ( cd `dirname .tmp/qbiff` && $(TAR) qbiff.tar qbiff && $(GZIP) qbiff.tar ) && $(MOVE) `dirname .tmp/qbiff`/qbiff.tar.gz . && $(DEL_FILE) -r .tmp/qbiff

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:

yaccclean:
lexclean:
clean: mocclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

qbiff.o: qbiff.cpp serverhandler.h \
		clientfolder.h \
		parser.h \
		notify.h \
		sslserver.h \
		sslinit.h \
		sslconnection.h \
		sslcommon.h \
		config.h \
		button.h \
		sslclient.h \
		clientinfo.h

sslcommon.o: sslcommon.cpp sslcommon.h \
		config.h

sslserver.o: sslserver.cpp sslserver.h \
		sslinit.h \
		sslconnection.h \
		sslcommon.h \
		config.h

sslinit.o: sslinit.cpp sslserver.h \
		sslinit.h \
		sslconnection.h \
		sslcommon.h \
		config.h

sslconnection.o: sslconnection.cpp sslserver.h \
		sslinit.h \
		sslconnection.h \
		sslcommon.h \
		config.h

sslclient.o: sslclient.cpp sslclient.h \
		sslcommon.h \
		config.h

serverhandler.o: serverhandler.cpp serverhandler.h \
		parser.h \
		notify.h \
		sslserver.h \
		sslinit.h \
		sslconnection.h \
		sslcommon.h \
		config.h

clientfolder.o: clientfolder.cpp clientfolder.h \
		button.h \
		sslclient.h \
		config.h \
		clientinfo.h \
		sslcommon.h

clientinfo.o: clientinfo.cpp clientinfo.h \
		config.h

button.o: button.cpp button.h \
		config.h

parser.o: parser.cpp parser.h

notify.o: notify.cpp notify.h \
		config.h \
		parser.h

moc_sslserver.o: moc_sslserver.cpp  sslserver.h sslinit.h \
		sslconnection.h \
		sslcommon.h \
		config.h

moc_sslinit.o: moc_sslinit.cpp  sslinit.h sslcommon.h \
		config.h

moc_sslconnection.o: moc_sslconnection.cpp  sslconnection.h sslcommon.h \
		config.h

moc_sslclient.o: moc_sslclient.cpp  sslclient.h sslcommon.h \
		config.h

moc_serverhandler.o: moc_serverhandler.cpp  serverhandler.h parser.h \
		notify.h \
		sslserver.h \
		sslinit.h \
		sslconnection.h \
		sslcommon.h \
		config.h

moc_clientfolder.o: moc_clientfolder.cpp  clientfolder.h button.h \
		sslclient.h \
		config.h \
		clientinfo.h \
		sslcommon.h

moc_clientinfo.o: moc_clientinfo.cpp  clientinfo.h config.h

moc_button.o: moc_button.cpp  button.h config.h

moc_notify.o: moc_notify.cpp  notify.h parser.h

moc_sslserver.cpp: $(MOC) sslserver.h
	$(MOC) sslserver.h -o moc_sslserver.cpp

moc_sslinit.cpp: $(MOC) sslinit.h
	$(MOC) sslinit.h -o moc_sslinit.cpp

moc_sslconnection.cpp: $(MOC) sslconnection.h
	$(MOC) sslconnection.h -o moc_sslconnection.cpp

moc_sslclient.cpp: $(MOC) sslclient.h
	$(MOC) sslclient.h -o moc_sslclient.cpp

moc_serverhandler.cpp: $(MOC) serverhandler.h
	$(MOC) serverhandler.h -o moc_serverhandler.cpp

moc_clientfolder.cpp: $(MOC) clientfolder.h
	$(MOC) clientfolder.h -o moc_clientfolder.cpp

moc_clientinfo.cpp: $(MOC) clientinfo.h
	$(MOC) clientinfo.h -o moc_clientinfo.cpp

moc_button.cpp: $(MOC) button.h
	$(MOC) button.h -o moc_button.cpp

moc_notify.cpp: $(MOC) notify.h
	$(MOC) notify.h -o moc_notify.cpp

####### Install

install:  

uninstall:  

